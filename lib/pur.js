// Generated by CoffeeScript 1.8.0
(function() {
  var ALWAYS, BubbleWrap, Defer, FIN, INI, Pur, STOP, StepFun, allResolver, alwaysResolver, failResolver, k, spreadResolver, stepResolver, stepWith, stepWithF, thenResolver, v,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  INI = {
    ini: true
  };

  FIN = {
    fin: true
  };

  Defer = (function() {
    function Defer() {
      this.pur = null;
    }

    Defer.prototype.push = function(v) {
      var err;
      try {
        return this.pur._exec(v, false);
      } catch (_error) {
        err = _error;
        if (err instanceof BubbleWrap) {
          throw err.wrap;
        }
        throw err;
      }
    };

    Defer.prototype.pushError = function(e) {
      var err;
      try {
        return this.pur._exec(e, true);
      } catch (_error) {
        err = _error;
        if (err instanceof BubbleWrap) {
          throw err.wrap;
        }
        throw err;
      }
    };

    Defer.prototype.resolve = function(v) {
      this.push(v);
      return this.end();
    };

    Defer.prototype.reject = function(e) {
      this.pushError(e);
      return this.end();
    };

    Defer.prototype.end = function() {
      return this.pur._exec(FIN, false);
    };

    return Defer;

  })();

  module.exports = Pur = (function() {
    function Pur(_value, _isError, _defer) {
      this._value = _value;
      this._isError = _isError;
      this._defer = _defer;
      if (!(this instanceof Pur)) {
        return new Pur(_value, false);
      }
      this._f = function(x) {
        return x;
      };
      this._resolver = thenResolver;
      this._prev = null;
      this._next = [];
      if (this._defer) {
        this._defer.pur = this;
      }
      this._isEnded = _value !== INI && !this._defer;
      if (_value instanceof Pur) {
        this._prev = this._value;
        this._value = INI;
        this._isError = false;
        this._prev._addNext(this);
      }
    }

    Pur.Defer = Defer;

    Pur.reject = function(error) {
      return new Pur(error, true);
    };

    Pur.defer = function(value) {
      return (new Pur(INI, false, new Defer()))._defer;
    };

    Pur.bubble = function(err) {
      throw new BubbleWrap(err);
    };

    Pur.prototype.isEnded = function() {
      return this._isEnded;
    };

    Pur.prototype._exec = function(v, isError) {
      var err, _ref;
      if (this._isEnded && this._value !== INI) {
        return;
      }
      if (v === FIN) {
        if ((_ref = this._prev) != null) {
          _ref._removeNext(this);
        }
        this._isEnded = true;
        this._forward(FIN, isError);
      } else {
        try {
          if (!this._resolver(this, this._f, this._args, v, isError)) {
            this._setValue(v, isError);
          }
        } catch (_error) {
          err = _error;
          if (err instanceof BubbleWrap) {
            if (this._defer) {
              throw err;
            } else {
              throw err.wrap;
            }
          }
          this._setValue(err, true);
        }
      }
      return this;
    };

    Pur.prototype._resolver = function() {
      return false;
    };

    Pur.prototype._setValue = function(v, isError) {
      if (this._isEnded && this._value !== INI) {
        return;
      }
      this._isError = isError;
      this._value = v;
      return this._forward(v, isError);
    };

    Pur.prototype._forward = function(v, isError) {
      if (v === INI) {
        return;
      }
      this._next.forEach(function(n) {
        return n._exec(v, isError);
      });
      return this;
    };

    Pur.prototype._addNext = function(n) {
      this._next.push(n);
      n._prev = this;
      if (this._value !== INI) {
        n._exec(this._value, this._isError);
        n._isEnded = this._isEnded;
      }
      return n;
    };

    Pur.prototype._removeNext = function(n) {
      var i;
      delete n._prev;
      if (i = this._next.indexOf(n) >= 0) {
        this._next.splice(i, 1);
      }
      return this;
    };

    Pur.prototype.val = function() {
      if (this._value === INI) {
        return void 0;
      }
      return this._value;
    };

    Pur.prototype.done = function() {
      var p;
      p = new Pur(INI);
      p._resolver = function(s, f, args, v, isError) {
        if (isError) {
          Pur.bubble(v);
        }
        return true;
      };
      this._addNext(p);
      return void 0;
    };

    return Pur;

  })();

  BubbleWrap = (function(_super) {
    __extends(BubbleWrap, _super);

    function BubbleWrap(wrap) {
      this.wrap = wrap;
      BubbleWrap.__super__.constructor.apply(this, arguments);
    }

    return BubbleWrap;

  })(Error);

  stepWith = function(resolver) {
    return function() {
      var p, _args;
      _args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      p = new Pur(INI);
      p._resolver = resolver;
      p._args = _args;
      return this._addNext(p);
    };
  };

  stepWithF = function(resolver) {
    return function() {
      var p, _args, _f, _i;
      _args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), _f = arguments[_i++];
      p = new Pur(INI);
      p._resolver = resolver;
      p._args = _args;
      p._f = _f;
      return this._addNext(p);
    };
  };

  ALWAYS = {};

  STOP = {};

  stepResolver = function(mode) {
    return function(s, f, args, v, isError) {
      var av, r, waitFor;
      if (!(mode === ALWAYS || mode === isError)) {
        return false;
      }
      av = mode === ALWAYS ? [v, isError] : [v];
      r = args && args.length ? f.apply(this, args.concat(av)) : f.apply(this, av);
      (waitFor = function(val, isError) {
        if (val instanceof Pur) {
          return val.always(function(x, isResolvedErr) {
            waitFor(x, isResolvedErr);
            return STOP;
          });
        } else if (val === STOP) {

        } else {
          return s._setValue(val, isError);
        }
      })(r, false);
      return true;
    };
  };

  thenResolver = stepResolver(false);

  failResolver = stepResolver(true);

  alwaysResolver = stepResolver(ALWAYS);

  allResolver = function(s, f, args, v, isError) {
    return false;
  };

  spreadResolver = function(s, f, args, v, isError) {
    var f2, v2;
    v2 = (args || []).concat(v);
    f2 = function() {
      return f.apply(this, v2);
    };
    return thenResolver(s, f2, void 0, v2, isError);
  };

  StepFun = {
    then: stepWithF(thenResolver),
    fail: stepWithF(failResolver),
    always: stepWithF(alwaysResolver),
    all: stepWith(allResolver),
    spread: stepWithF(spreadResolver)
  };

  for (k in StepFun) {
    v = StepFun[k];
    Pur.prototype[k] = v;
  }

  Pur.prototype.map = Pur.prototype.then;

  Pur.prototype["catch"] = Pur.prototype.fail;

  Pur.prototype["finally"] = Pur.prototype.fin = Pur.prototype.always;

}).call(this);
